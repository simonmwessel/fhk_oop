package de.fhkiel.oop

import de.fhkiel.oop.config.Config
import de.fhkiel.oop.factory.FormFactory
import de.fhkiel.oop.model.Shape
import de.fhkiel.oop.shapes.Circle
import de.fhkiel.oop.shapes.Rectangle
import de.fhkiel.oop.shapes.Square
import de.fhkiel.oop.utils.RandomUtils.Distribution
import processing.core.PApplet

/**
 * A Processing sketch that visualizes random shapes generated by the [FormFactory].
 *
 * This sketch ties together several components:
 *
 * Canvas sizing based on [Config.MAX_X] and [Config.MAX_Y].
 * Shape generation via [FormFactory], producing instances of [Circle], [Rectangle], and [Square].
 * Distribution control for sizes and origins using [Distribution].
 * Rendering of shapes using Processing's drawing primitives provided by [PApplet].
 *
 * ## Workflow
 * 1. [settings] configures the sketch window size.
 * 2. [setup]    initializes color mode, background, resizability, and populates the [shapes] list.
 * 3. [draw]     clears the canvas each frame and renders each shape with its graphic attributes.
 *
 * @author  Simon Wessel
 * @version 1.1
 * @since   2.3
 *
 * @see [Config]
 * @see [FormFactory]
 * @see [Distribution]
 * @see [PApplet]
 * @see [Shape]
 */
class Sketch : PApplet() {

    private lateinit var shapes: List<Shape>

    /**
     * Sets the size of the sketch window based on [Config.MAX_X] and [Config.MAX_Y].
     * This is invoked by Processing before [setup].
     */
    override fun settings() {
        size(Config.MAX_X.toInt(), Config.MAX_Y.toInt())
    }

    /**
     * Initializes the sketch:
     *
     * Configures the color mode to RGB.
     * Clears the background to white.
     * Enables window resizability.
     * Generates a list of random shapes via [FormFactory.produce], using
     *    [Distribution.NORMAL] for sizes and [Distribution.UNIFORM] for origins.
     *
     * Called once by Processing after [settings].
     *
     * @see FormFactory.produce
     * @see Distribution
     */
    override fun setup() {
        colorMode(RGB, 255f)
        background(
            Config.SKETCH_BACKGROUND_COLOR.red,
            Config.SKETCH_BACKGROUND_COLOR.green,
            Config.SKETCH_BACKGROUND_COLOR.blue
        )
        surface.setResizable(true)

        shapes = FormFactory().produce(
            count            = 40,
            safe             = true,
            sizeDist         = Distribution.NORMAL,
            sizePeakFraction = .2f,
            originDist       = Distribution.UNIFORM
        )

        println("\nFollowing shapes were sketched:")
        for (shape in shapes) println(shape)
    }

    /**
     * Continuously renders all shapes to the sketch canvas while handling window resizing.
     *
     * This Processing framework method:
     * 1. Clears the canvas using [Config.SKETCH_BACKGROUND_COLOR]
     * 2. Calculates scaling/offset to keep shapes centered if window is resized
     * 3. Delegates actual shape rendering to each [Shape]'s [Shape.draw] implementation
     *
     * The scaling logic preserves aspect ratio using:
     * - [baseW]/[baseH] as reference dimensions from [Config]
     * - [min] to maintain proportional scaling
     * - Dynamic offset calculation for centering
     *
     * @see PApplet.draw Processing's draw cycle documentation
     * @see Shape.draw Individual shape rendering logic
     * @see Config.SKETCH_BACKGROUND_COLOR Background color source
     */
    override fun draw() {
        background(
            Config.SKETCH_BACKGROUND_COLOR.red,
            Config.SKETCH_BACKGROUND_COLOR.green,
            Config.SKETCH_BACKGROUND_COLOR.blue
        )

            when (shape) {
                is Circle ->
                    ellipse(
                        shape.origin.x,
                        shape.origin.y,
                        shape.radius * 2,
                        shape.radius * 2
                    )
                is Rectangle ->
                    rect(
                        shape.origin.x,
                        shape.origin.y,
                        shape.width,
                        shape.height
                    )
                is Square ->
                    rect(
                        shape.origin.x,
                        shape.origin.y,
                        shape.sideLength,
                        shape.sideLength
                    )
            }
        }
        shapes.forEach { it.draw(this) }
    }
}
