package de.fhkiel.oop

import de.fhkiel.oop.config.Config
import de.fhkiel.oop.factory.FormFactory
import de.fhkiel.oop.model.Shape
import de.fhkiel.oop.shapes.Circle
import de.fhkiel.oop.shapes.Rectangle
import de.fhkiel.oop.shapes.Square
import de.fhkiel.oop.utils.RandomUtils.Distribution
import processing.core.PApplet

/**
 * A Processing sketch that draws all shapes generated by FormFactory.
 *
 * @author Simon Wessel
 * @version 1.0
 * @since 2.3
 */
class Sketch : PApplet() {

    private lateinit var shapes: List<Shape>

    /** Set the size of the window based on your Config constants. */
    override fun settings() {
        size(Config.MAX_X.toInt(), Config.MAX_Y.toInt())
    }

    /** Initialize background, color mode and generate random shapes. */
    override fun setup() {
        colorMode(RGB, 255f)
        background(255)
        surface.setResizable(true)

        shapes = FormFactory().produce(
            count      = 20,
            sizeDist   = Distribution.NORMAL,
            originDist = Distribution.UNIFORM
        )
    }

    /** Draw loop: clear & render each shape with its graphic attributes. */
    override fun draw() {
        background(255)
        for (shape in shapes) {
            // set fill and stroke from your Color-wrapper
            fill(
                shape.fillColor.red,
                shape.fillColor.green,
                shape.fillColor.blue,
                shape.fillColor.alpha
            )
            stroke(
                shape.strokeColor.red,
                shape.strokeColor.green,
                shape.strokeColor.blue,
                shape.strokeColor.alpha
            )
            strokeWeight(shape.strokeWeight)

            // draw according to shape type
            when (shape) {
                is Circle ->
                    ellipse(
                        shape.origin.x,
                        shape.origin.y,
                        shape.radius * 2,
                        shape.radius * 2
                    )
                is Rectangle ->
                    rect(
                        shape.origin.x,
                        shape.origin.y,
                        shape.width,
                        shape.height
                    )
                is Square ->
                    rect(
                        shape.origin.x,
                        shape.origin.y,
                        shape.sideLength,
                        shape.sideLength
                    )
            }
        }
    }
}
