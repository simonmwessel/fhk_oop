package de.fhkiel.oop.model

import de.fhkiel.oop.config.DistributionConfig
import de.fhkiel.oop.factory.FormFactory

/**
 * Represents the different types of shapes that can be generated by the [FormFactory].
 *
 * Each enum constant implements the [produce] method to delegate the actual shape creation
 * to the corresponding method in [FormFactory] (e.g., [FormFactory.circle]).
 *
 * @see FormFactory
 * @see FormFactory.circle
 * @see FormFactory.rectangle
 * @see FormFactory.square
 * @see BaseShape
 * @see DistributionConfig
 */
enum class ShapeType {
    /**
     * Represents a circular shape.
     * Its [produce] method calls [FormFactory.circle].
     */
    CIRCLE {
        override fun produce(
            factory:      FormFactory,
            sizeConfig:   DistributionConfig,
            originConfig: DistributionConfig
        ): BaseShape =
            factory.circle(sizeConfig, originConfig)
    },

    /**
     * Represents a rectangular shape.
     * Its [produce] method calls [FormFactory.rectangle].
     */
    RECTANGLE {
        override fun produce(
            factory:      FormFactory,
            sizeConfig:   DistributionConfig,
            originConfig: DistributionConfig
        ): BaseShape =
            factory.rectangle(sizeConfig, originConfig)
    },

    /**
     * Represents a square shape.
     * Its [produce] method calls [FormFactory.square].
     */
    SQUARE {
        override fun produce(
            factory:      FormFactory,
            sizeConfig:   DistributionConfig,
            originConfig: DistributionConfig
        ): BaseShape =
            factory.square(sizeConfig, originConfig)
    };

    /**
     * Abstract method to produce a shape of the specific type.
     *
     * Implementations of this method will call the appropriate creation method
     * on the provided [FormFactory] instance (e.g., [FormFactory.circle] for [CIRCLE]).
     *
     * @param factory The [FormFactory] instance to use for creating the shape.
     * @param sizeConfig The [DistributionConfig] for the shape's size parameters.
     * @param originConfig The [DistributionConfig] for the shape's origin coordinates.
     * @return The created [BaseShape] instance.
     */
    abstract fun produce(
        factory:      FormFactory,
        sizeConfig:   DistributionConfig,
        originConfig: DistributionConfig
    ): BaseShape
}
